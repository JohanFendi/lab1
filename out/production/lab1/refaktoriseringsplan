Model:

Eliminera transitiv relation där movementObject krävs för att nå position och vektor.
    Inför specifika getters i Vehicle för vektorns X/Y-komponent och positionens X/Y-koordinater.
    Förhindrar direkt exponering och ändring av  movementObject.

Skapa abstrakt klass FlatbedTruck och flytta relevant kod dit.
    Specifika FlatbedTruck-typer blir konkreta modeller genom arv.

Applicera samma princip på ContainerTruck, där Scania ärver från en ny abstrakt klass.
    Inför Container-gränssnitt för specifika containertyper.
    ContainerTruck får en container via sin konstruktor.

Liknande refaktorering görs för FlatbedTruck och Flatbed.

Vi Inför modelFascade, den sköter kommunikationen mellan app och model.

Refaktorisering av Controller & View:
    Controller hanterar endast Model, medan View refererar till Controller. Det vill säga, has a relationen ser ut såhär: Model -> Controller -> View
    Flytta affärslogik till ModelFacade för att separera den från Controller.
    View ska endast rita bilder och hantera positioner kopplade till unika ID:n.
    Inkluderar CarView och DrawPanel.

TimerListener och timerfältet flyttas från Controller till App, vilket minskar logik i Controller.

Fordonsinstansiering i Controllers main-metod flyttas till ModelFacade.

Tillägg av App (Flytt från MVC)
    App Innehåller:
        View: Visar endast data från modellen (UI),
        Controller: Hanterar användarinteraktioner och vidarebefordrar anrop till modellen,
        Model: Innehåller affärslogik såsom bilrörelse och kollisioner.
    App utgör:
        Central kommunikationspunkt.
        Innehåller ActionListener och timerfältet som flyttas från Controller.
        App hanterar uppdateringar vid varje "tick" och synkroniserar Model och View.